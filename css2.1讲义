css2.1讲义

一、浮动和定位

1. 浮动能够提升层级，提升半层。
   一个元素分两层，上层为文字相关的，下层为盒模型相关的。

2. 定位与定位参照
   定位：
      通过position属性来设置元素的定位
         可选值：
            static：默认不开启定位
            relative：相对定位
            absolute：绝对定位
            fixed：固定定位（绝对定位的一种）

         1.相对定位
            相对定位不会改变元素的性质                    
            开启相对定位的元素不会脱离文档流，但会使元素提升一个层级，盖住文档流的元素 

         2.绝对定位
            绝对定位会改变元素的性质
            开启绝对定位，会使元素脱离文档流
            绝对定位是相对于离它最近的开启了定位的祖先元素进行定位的
                  （一般，如果开启了子元素的绝对定位都会开启父元素的相对定位；
                  如果所有的祖先元素都没有开启定位，则会相对于浏览器窗口进行定位）
            绝对定位会使元素提升一个层级，盖住文档流的元素 

         3.固定定位
            大部分特点同继承绝对定位，不同的是：
               固定定位永远相对于浏览器窗口进行定位，而且不随浏览器滚动条滚动
               IE6不支持固定定位，只能用js来兼容IE6的固定定位
            应用：小窗口视频，客服，回到顶部按钮

   定位参照：
      static：包含块
      relative：元素本来的位置
      absolute：包含块（最近的启动定位的祖先元素，有就是包含块；没有就是初始包含块）
      fixed：视口

3. 清除浮动
   清除浮动即让浮动的子元素撑开父级的高度。
      1.直接给父级加高度(能加高度就加高度）

      2.通过开启BFC（IE6，7下不支持）移动端常用
            overflow: hidden;
            浮动盒子的特点，定位盒子的特点：
               1)高度都由内容撑开 
               2）水平方向上：left + right + width + padding + margin = 包含块padding区域的尺寸
                  垂直方向上：top + bottom + height + padding + margin = 包含块padding区域的尺寸


      3.br标签清浮动：<br clear="all"/>（IE6下不支持）

      4.div空标签清浮动：<div style="clear:both;"></div>（IE6下最小高度为19px问题，可以尝试元素font-size=0 -> 仍有2px空隙）
      
      5.伪元素：(主流)        
            .clearfix{
               zoom: 1;
            }
            .clearfix:after{
               content: "";
               display:table/block;
               clear:both;

            <div id="wrap" class="clearfix"></div>
            //触发IE的haslayout布局（≈IE的BFC）


二、继承性
   继承性是css中需要特别关注的点，不明确的相关继承性应查询w3hSchool手册/css，和Mozilla-MDN Web文档。
      地址一：https://www.w3school.com.cn/index.html
      地址二：http://www.818seo.com/w3c/css/index.asp
      地址三：https://developer.mozilla.org/zh-CN/

   css学习前期尤其需要注意：

      height值是html根标签的包含块（初始包含块）的height的（视口的）100%，百分比的大小是相对其最近的父级元素的高的大小
      高度需要一层一层继承，如果html没有高度，那么body不会有高度----移动端重点----
      即：body想用视口的高度，每个上级都要继承height


三、几种布局

1. 两列布局（
1）一般的两列布局：
      需求：两列布局应该分开，right不应该覆盖left。
      关键代码：
            #left {        
               ...
               float: left; 
            }
            
            #right {
               ...
               overflow: auto; /* 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。*/
            }

      默认设置：* {
                  margin: 0;
                  padding: 0;
               } 
               /* 手动简易版，也可以直接导入reset css文档，地址：
                  https://meyerweb.com/eric/tools/css/reset/ */
               
               body {
                     min-width: ...;
               }

2）BFC(Block Formatting Context)实现的两列布局

   在给出BFC实现的两列布局的代码之前，先要提一下css中的 overflow 属性（参看相关文档）。
      CSS属性 overflow 定义当一个元素的内容太大而无法适应块级格式化上下文时候该做什么，它是 overflow-x 和overflow-y的简写属性。
      这个选项包含剪切，显示滚动条，或者显示从容器溢出到周围区域的内容。

      overflow的三个常用值：

      hidden
      如果需要，内容将被剪裁以适合填充框。 不提供滚动条。
      scroll
      如果需要，内容将被剪裁以适合填充框。 浏览器显示滚动条，无论是否实际剪切了任何内容。 
      （这可以防止滚动条在内容更改时出现或消失）打印机仍可能打印溢出的内容。
      auto
      取决于用户代理。 如果内容适合填充框内部，则它看起来与可见内容相同，但仍会建立新的块格式化上下文。 
      如果内容溢出，桌面浏览器会提供滚动条。

      滚动条：
      
         如果html和body只有一个有 overflow: scroll;，则最终此属性值作用在文档上；
         如果html和body两个都有 overflow: scroll;，则最终此属性值body上；

         禁止系统的默认滚动条：
         html,body{
               height: 100%;
               overflow: hidden;
         }

         补充：fixed定位和absolute定位只在出现滚动条时不同，
               拖动系统滚动时才可能使初始包含块拖动，从而移动absolute定位的元素
               可以使用绝对定位来模拟固定定位：
               html{
                  height: 100%;
                  overflow: hidden; //作用给文档
               }
               body{
                  height: 100%;
                  overflow: scroll; //作用给自身
               }

               #test{
                  position: absolute;
                  ...
               }

   下面是由BFC实现的两列布局：

      关键代码：
            #wrap {
               width: 600px;
               border: 1px solid;
               margin: 0 auto; /* 浮动或定位时失效 */
            }
         
         #left {
               float: left;
               ...
               background-position: -50px -50px;
            }
         
         #right {
               ...
               margin-left: 10px;
               overflow: hidden; /* 开启BFC */          

               display: block;
               white-space: nowrap;
               text-overflow: ellipsis;
               overflow: hidden;
               /* 使溢出数据省略 */
            }

      应用：左右两列布局的商品链。

3）伪等高布局：
      关键代码：
            #wrap {
               ...
               overflow: hidden;
               /* 清除浮动，隐藏溢出该元素边界的部分 */
            }
            
            #wrap .left {
               float: left;
               ...
               padding-bottom: 1000px;
               margin-bottom: -1000px;
               /* 改变文档流中元素的边距不会改变元素的位置，不会影响padding和content，即：
                  margin为负值，撑开边界，不会移动元素本身，位置只看left，top */
            }
            
            #wrap .right {
               float: left;
               ...
               padding-bottom: 1000px;
               margin-bottom: -1000px;
            }

            .clearfix{
               ...
            }

      应用：在使用float的圣杯布局、双飞翼布局及其他常用布局中都可以使用伪等高布局。


2. 三列布局
   需求：(1)两边固定，当中自适应
        (2)当中列要完整显示
        (3)当中列要优先加载

   注意：三列布局不要用定位实现，单纯的浮动也不能实现第三需求。

(1)圣杯布局
   有很多种实现方法，推荐使用“flex伸缩模型”和“浮动+相对定位”两种方法。

   “flex伸缩模型”：
      “flex伸缩神”能使你的代码简约灵活，可以避免使用相对繁琐，容易出错的浮动和定位。
      关键代码： 
            #content {
               display: flex;
            }
               
            #content .middle {
               ...
               flex: 1; /* 中部区域自由伸缩 */              
            }
               
            #content .left {
               ...
               order: -1;
            }
               
            #content .right {
               ...
            }

   “浮动+相对定位”：
      
      相对普通，可以自己查找相关博客，这里仅提一下这种方法的技术点：
      圣杯布局技术点： 
    1) 浮动：搭建完整的布局框架 
    2) 设置边缘：使三列布局到一行上 
    3) 相对定位：调整旁边两列的位置（使左右两列分别在两边）
     

(2)双飞翼布局
   对比圣杯布局，处理两列位置的方式不同：
      圣杯布局：给父元素content加padding，然后通过相对定位将左右拉出。
      双飞翼布局：在middle中再加一层结构，不需要使用定位，相对更好一些。

   关键代码： 
         ...
         #content .middle,
         #content .left,
         #content .right {
            float: left;
            padding-bottom: 10000px;
            margin-bottom: -10000px;
            text-align: center;
            height: 50px;
         }
         /* 三列的伪等高布局 */
        
         #content {
            overflow: hidden;
         }
        
         #content .middle {
	    ...
            width: 100%;         
         }
        
         #content .middle .m_inner {
            padding: 0 200px;
         }
        
         #content .left,
         #content .right {
            ...
            width: 200px;
         }
        
         #content .left {
            margin-left: -100%;
         }
        
         #content .right {
            margin-left: -200px;
         }


         ...
         <div id="content">
            <div class="middle">
               <class class="m_inner">middle</class>
            </div>
            <div class="left">left</div>
            <div class="right">right</div>
         </div>

   补充：margin使用负值是一种常见的移动元素边界的方法，
         具体可以查看这篇博客：https://www.cnblogs.com/xiaohuochai/p/5314289.html     

3. 多列布局
      涉及html,css,js(ecmascript,dom[!important],bom)和node树，在此不作详细阐述。

4. 粘连布局
   粘连布局(stiky-footer)常见于客户端，是一种将底部粘连在主体部分后,不跟随主体部分移动位置的布局方法。

   关键代码：
         html,
         body {
            height: 100%;
         }
         
         #wrap {
            ...
            min-height: 100%;  /* 内容高度很少时也能撑开到min-height设置的高度min-height，min-height是在height计算之后再套用的. */       
            margin-bottom: 50px; 
         }
         
         #footer {
            ...
            height: 50px;
            line-height: 50px;
            text-align: center;
            margin-top: -50px; /* 使footer部分出现在页面中 */
         }
         
         .main {
            text-align: center;
         }


四.预处理器（less）
   less能使代码的结构更清晰，但并不是一定要使用less的；less只是原生css的一种变形，并不能简化代码
      变量
         @
         变量的延迟加载
         变量是块级作用域
      嵌套
         &：平级
      混合（mix-in）
         将一系列的规则集引入到另一个规则集中，使用.的形式来定义（复制粘贴）
         普通混合（编译到原声css中）
         不带输出的混合（加双括号）
         带参数的混合
         带默认值的混合
         匹配模式（@_,@_,@_,...),注意匹配个数
         arguments
      计算
         加减乘除，计算的一方带单位
         原声css：calc();
      继承（extends）
      不使用@import "新建的规则集文档路径";
         .class: extend(.规则集 all（如有规则集还有hover之类的）){

         }
         性能比混合高
         灵活度比混合低

      less避免编译：~"..."

五.兼容性
   兼容性问题主要涉及兼容低版本的IE。

1) CSSHack：
   如果要在某些特殊的浏览器中执行特殊的代码，可以使用CSS Hack来解决
      CSS Hack代码只被某些浏览器（主要指IE6）能够识别，这种方式还可以为特别的浏览器设置单独的样式表

    <!--[if IE 6]>
            <p>为了您的健康，请科学上网～ </p>
    <![endif]-->

    <!--[if lte IE 9]>
            <p>本浏览器为IE9以下的版本～ </p>
    <![endif]-->

    
    语法意义：
    https://blog.csdn.net/u013063153/article/details/52689580


    css参考手册：css属性Hack
         注意：Css Hack尽量不用，维护不便捷
         _color: #ff0;   For IE6 and earlier
         *color: #f00;   For IE7 and earlier 

    <!--[if IE 6]>   
        <script type="text/javascript" src="http://www.dillerdesign.com/experiment/DD_belatedPNG/DD_belatedPNG_0.0.8a.js"></script>
        <script>
            DD_belatedPNG.fix("div");
        </script>
    <![endif]-->

2)自定义检测低版本IE函数:

   实现代码：
      <!DOCTYPE html>
      <html lang="en">

      <head>
         <title>自定义检测低版本IE函数</title>
         <meta charset="UTF-8">
         <meta name="viewport" content="width=device-width, initial-scale=1">

      </head>

      <body>

      </body>
      <script type="text/javascript">
         console.log(isIE(7));

         //js中的作用域都是函数作用域，使用函数的局部变量
         function isIE(version) {
            var b = document.createElement("b");
            b.innerHTML = "<!--[if IE" + version + "] ><i></i><![endif]-->";
            return b.getElementsByTagName("i") == 1;
         }

         //伪数组：具有length属性的js对象
         console.log(document.body.getElementsByTagName("i").length);
      </script>

      </html>


Css3笔记链接：
Email-address: asteria_zhaimu@icloud.com

  